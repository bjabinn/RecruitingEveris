@using Recruiting.Application.Becarios.ViewModels
@using Recruiting.Application.Becarios.Enums
@using RecruitingWeb.Properties

@model Recruiting.Application.Becarios.ViewModels.BecarioRowViewModel

@{
    var permisoAdministrarBecario = (bool)TempData["ModificarBecario"];
    var candidatoId = (int)Model.CandidatoId;

    var estadoFinal = "false";

    if (Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Finalizado || Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Renuncia
        || Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Descartado)
    {
        estadoFinal = "true";
    }
}

<div>
    @if (!isRevoked() && !isContracted())
    {
        if (!isPaused())
        {
            if (permisoAdministrarBecario)
            {
                <a title="@Resources.HTML_Title_Ejecutar" id="Ejecutar">
                    @Display.GlyphiconButton("glyphicon-flash icon stateChange")
                </a>
                if (Model.EstadoBecarioId != (int)TipoEstadoBecarioEnum.Inicio)
                {
                    <a title="@Resources.HTML_Title_Renunciar" id="RenunciarButton" href="#" class="@GetDisabledClass(!permisoAdministrarBecario)">
                        @Display.GlyphiconButton("glyphicon-log-in icon stateChange")
                    </a>
                }

            }
            if (isPausable())
            {
                <a title="@Resources.HTML_Title_Pausar" id="Pausar" class="@GetDisabledClass(!permisoAdministrarBecario)">
                    @Display.GlyphiconButton("glyphicon-pause icon stateChange")
                </a>
            }
        }
        else
        {
            <a title="@Resources.HTML_Title_Retornar" href="@Url.Action("Reanudar", new { BecarioId = (int)Model.BecarioId })" class="@GetDisabledClass(!permisoAdministrarBecario)">
                @Display.GlyphiconButton("glyphicon-play icon stateChange")
            </a>
        }
    }
    @if (!isPaused() && canTurnBack())
    {
        <a title="@Resources.HTML_Title_Retroceder" id="RetrocederButton" href="#" class="@GetDisabledClass(!permisoAdministrarBecario)">
            @Display.GlyphiconButton("glyphicon-transfer icon stateChange")
        </a>
    }

    @if (isFinished() && isContractible())
    {
        <a title="@Resources.HTML_Title_PasarCandidatura" id="PasarCandidaturaButton" data-toggle="modal" data-target="#modalCrearCandidatura" class="@GetDisabledClass(!permisoAdministrarBecario)">
            @Display.GlyphiconButton("glyphicon glyphicon-chevron-right icon stateChange")
        </a>
    }

    <input type="hidden" name="estadoFinal" value=@estadoFinal />
    <input type="hidden" name="CandidatoId" id="CandidatoId" value=@candidatoId />
</div>

@functions{

    public bool isPaused()
    {
        return (
           Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Stand_By
        );
    }


    public bool isRevoked()
    {
        return (
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Renuncia ||
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Descartado
        );
    }

    public bool canTurnBack()
    {
        return (
            Model.EstadoBecarioId != (int)TipoEstadoBecarioEnum.Inicio
        );
    }

    public bool isContracted()
    {
        return (
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Finalizado
        );
    }

    public bool isPausable()
    {
        return (
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Inicio ||
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Seleccionado||
            Model.EstadoBecarioId==(int)TipoEstadoBecarioEnum.En_Proceso

        );
    }

    public bool isFinished()
    {
        return (
            Model.EstadoBecarioId == (int)TipoEstadoBecarioEnum.Finalizado

        );
    }

    public bool isContractible()
    {
        return (
            Model.TipoDecisionFinalId == (int)TipoDecisionPracticasEnum.Contratable
            && Model.ExisteCandidatura == false

        );
    }

}

@helper GetDisabledClass(bool disable)
{
var disabled = string.Empty;
if (disable)
{
    disabled = "disabled";
}

    @disabled
}